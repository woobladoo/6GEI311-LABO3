# coding: utf-8

"""
    API de gestion de contenu des cours en ligne

    Voici mon API REST pour gérer les cours, les séances et les fichiers associés à ceux-ci  # noqa: E501

    OpenAPI spec version: 1.0.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SeanceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_seance(self, **kwargs):  # noqa: E501
        """création d'une seance  # noqa: E501

        création d'une seance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_seance(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_seance_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_seance_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_seance_with_http_info(self, **kwargs):  # noqa: E501
        """création d'une seance  # noqa: E501

        création d'une seance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_seance_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_seance" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cours/seance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_seance(self, seance_id, **kwargs):  # noqa: E501
        """Suppression d'une seance d'un cours  # noqa: E501

        Suppression d'une séance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_seance(seance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object seance_id: ID de la seance (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_seance_with_http_info(seance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_seance_with_http_info(seance_id, **kwargs)  # noqa: E501
            return data

    def delete_seance_with_http_info(self, seance_id, **kwargs):  # noqa: E501
        """Suppression d'une seance d'un cours  # noqa: E501

        Suppression d'une séance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_seance_with_http_info(seance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object seance_id: ID de la seance (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['seance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_seance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'seance_id' is set
        if ('seance_id' not in params or
                params['seance_id'] is None):
            raise ValueError("Missing the required parameter `seance_id` when calling `delete_seance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'seance_id' in params:
            query_params.append(('seanceID', params['seance_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cours/seance/{seanceID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_seance(self, seance_id, **kwargs):  # noqa: E501
        """Trouver une seance selon ID spécifique  # noqa: E501

        Trouver une seance selon ID spécifique  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_seance(seance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object seance_id: ID de la seance (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_seance_with_http_info(seance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_seance_with_http_info(seance_id, **kwargs)  # noqa: E501
            return data

    def find_seance_with_http_info(self, seance_id, **kwargs):  # noqa: E501
        """Trouver une seance selon ID spécifique  # noqa: E501

        Trouver une seance selon ID spécifique  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_seance_with_http_info(seance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object seance_id: ID de la seance (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['seance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_seance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'seance_id' is set
        if ('seance_id' not in params or
                params['seance_id'] is None):
            raise ValueError("Missing the required parameter `seance_id` when calling `find_seance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'seance_id' in params:
            path_params['seanceID'] = params['seance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cours/seance/{seanceID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def seance_find_by_module(self, module, **kwargs):  # noqa: E501
        """Trouver la séance selon un module spécifique  # noqa: E501

        Trouver la séance selon un module spécifique  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.seance_find_by_module(module, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object module: Nom du module (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.seance_find_by_module_with_http_info(module, **kwargs)  # noqa: E501
        else:
            (data) = self.seance_find_by_module_with_http_info(module, **kwargs)  # noqa: E501
            return data

    def seance_find_by_module_with_http_info(self, module, **kwargs):  # noqa: E501
        """Trouver la séance selon un module spécifique  # noqa: E501

        Trouver la séance selon un module spécifique  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.seance_find_by_module_with_http_info(module, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object module: Nom du module (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['module']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method seance_find_by_module" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'module' is set
        if ('module' not in params or
                params['module'] is None):
            raise ValueError("Missing the required parameter `module` when calling `seance_find_by_module`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'module' in params:
            query_params.append(('Module', params['module']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cours/seance/findByModule', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def seance_find_by_semaine(self, semaine, **kwargs):  # noqa: E501
        """Trouver la séance selon une semaine  # noqa: E501

        Trouver la séance selon une semaine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.seance_find_by_semaine(semaine, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object semaine: Nombre de la semaine (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.seance_find_by_semaine_with_http_info(semaine, **kwargs)  # noqa: E501
        else:
            (data) = self.seance_find_by_semaine_with_http_info(semaine, **kwargs)  # noqa: E501
            return data

    def seance_find_by_semaine_with_http_info(self, semaine, **kwargs):  # noqa: E501
        """Trouver la séance selon une semaine  # noqa: E501

        Trouver la séance selon une semaine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.seance_find_by_semaine_with_http_info(semaine, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object semaine: Nombre de la semaine (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['semaine']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method seance_find_by_semaine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'semaine' is set
        if ('semaine' not in params or
                params['semaine'] is None):
            raise ValueError("Missing the required parameter `semaine` when calling `seance_find_by_semaine`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'semaine' in params:
            query_params.append(('Semaine', params['semaine']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cours/seance/findBySemaine', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
