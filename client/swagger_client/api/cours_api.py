# coding: utf-8

"""
    API de gestion de contenu des cours en ligne

    Voici mon API REST pour gérer les cours, les séances et les fichiers associés à ceux-ci  # noqa: E501

    OpenAPI spec version: 1.0.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CoursApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_cours(self, **kwargs):  # noqa: E501
        """Add a new cours  # noqa: E501

        Add a new cours  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_cours(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_cours_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_cours_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_cours_with_http_info(self, **kwargs):  # noqa: E501
        """Add a new cours  # noqa: E501

        Add a new cours  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_cours_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_cours" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cours', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cours(self, cours_id, **kwargs):  # noqa: E501
        """Delete cours  # noqa: E501

        This can only be done by the logged in user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cours(cours_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object cours_id: The coursID that needs to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cours_with_http_info(cours_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cours_with_http_info(cours_id, **kwargs)  # noqa: E501
            return data

    def delete_cours_with_http_info(self, cours_id, **kwargs):  # noqa: E501
        """Delete cours  # noqa: E501

        This can only be done by the logged in user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cours_with_http_info(cours_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object cours_id: The coursID that needs to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cours_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cours" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cours_id' is set
        if ('cours_id' not in params or
                params['cours_id'] is None):
            raise ValueError("Missing the required parameter `cours_id` when calling `delete_cours`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cours_id' in params:
            path_params['coursID'] = params['cours_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cours/{coursID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_cours_by_id(self, cours_id, **kwargs):  # noqa: E501
        """Finds cours by ID  # noqa: E501

        Finds a cours by its ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_cours_by_id(cours_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object cours_id: ID de cours (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_cours_by_id_with_http_info(cours_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_cours_by_id_with_http_info(cours_id, **kwargs)  # noqa: E501
            return data

    def find_cours_by_id_with_http_info(self, cours_id, **kwargs):  # noqa: E501
        """Finds cours by ID  # noqa: E501

        Finds a cours by its ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_cours_by_id_with_http_info(cours_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object cours_id: ID de cours (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cours_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_cours_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cours_id' is set
        if ('cours_id' not in params or
                params['cours_id'] is None):
            raise ValueError("Missing the required parameter `cours_id` when calling `find_cours_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cours_id' in params:
            path_params['coursID'] = params['cours_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cours/{coursID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_cours_by_tags(self, **kwargs):  # noqa: E501
        """Finds cours by tags  # noqa: E501

        Multiple tags can be provided with comma-separated strings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_cours_by_tags(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object tags: Tags to filter by
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_cours_by_tags_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_cours_by_tags_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_cours_by_tags_with_http_info(self, **kwargs):  # noqa: E501
        """Finds cours by tags  # noqa: E501

        Multiple tags can be provided with comma-separated strings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_cours_by_tags_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object tags: Tags to filter by
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_cours_by_tags" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cours/findByTags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_cours(self, cours_id, **kwargs):  # noqa: E501
        """Modification d'un cours existant  # noqa: E501

        Modification d'un cours existant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cours(cours_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object cours_id: ID de cours (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_cours_with_http_info(cours_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_cours_with_http_info(cours_id, **kwargs)  # noqa: E501
            return data

    def update_cours_with_http_info(self, cours_id, **kwargs):  # noqa: E501
        """Modification d'un cours existant  # noqa: E501

        Modification d'un cours existant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cours_with_http_info(cours_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object cours_id: ID de cours (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cours_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cours" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cours_id' is set
        if ('cours_id' not in params or
                params['cours_id'] is None):
            raise ValueError("Missing the required parameter `cours_id` when calling `update_cours`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cours_id' in params:
            path_params['coursID'] = params['cours_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cours/{coursID}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
